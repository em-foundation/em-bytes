{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EM\u2022Bytes \u2009\u00b7\u2009 Home","text":""},{"location":"#bite-sized-posts-on-tiny-code-for-tiny-chips","title":"Bite-sized posts on \"tiny-code for tiny-chips\"","text":"<p>EM\u2022Bytes serves as the voice of The EM Foundation \u2013 a 501(c)(3) non-profit which sponsors and promotes novel software technology for resource-constrained embedded systems.</p> <p>Our \"tiny-code for tiny-chips\" mantra reflects a deep-seated belief about the current state of embedded software engineering \u2013 too much memory bloat, too much runtime overhead, and too many high-level programming APIs for the job at hand.</p> <p>With so much technical debt taken on by today's legacy embedded software, next-generation MCUs have little choice but to add more memory and more MIPs to mitigate software's ever-expanding size and complexity.</p> <p>On a personal note</p> <p>When I began programming embedded systems in the late 1970s, most target processors had less than 32K of memory.\u2009  But somehow, we managed to overcome this constraint in real-world applications \u2013 taking pride in how compact we could craft our code.</p> <p>Today, of course, even the most rudimentary low-power sensor tag demands at least 10\u00d7 the memory \u2013 for application software that now includes device drivers, a wireless stack, DSP functions, and perhaps an RTOS.</p> <p>But what if we could shrink\u2009 this software by an order of magnitude \u2013 and enjoy comparable reductions in power consumption and system cost\u2009???</p> <p>Knowing that we truly have \"tiny-code\", we can imagine a new breed of \"tiny-chips\" \u2013 novel MCU architectures with 10\u00d7 gains in performance and efficiency.</p> <p>The articles which follow touch on a range of topics under our \"tiny-code for tiny-chips\" umbrella \u2013 often highlighting initiatives by the The EM Foundation to drive change in how we think about resource-constrained embedded systems.</p> <p>We'll keep the articles short \u2013 skim them in a minute, digest them in under ten....\u2009  And though each post will invariably cover technical material, we'll keep the content high-level \u2013 flying at 10,000 feet, but with links to other resources for those wishing to deep-dive on the ground.</p> <p>Happy coding\u2009!!! \u2002  </p> <p></p>"},{"location":"#quantifying-energy-efficiency-with-emscope","title":"Quantifying energy efficiency with EM\u2022Scope","text":"<p> October 1, 2025\u2009 \u00b7  7 min read</p> <p>Vendor data sheets might specify that an ultra-low-power MCU draws (say) 700\u2009nA @\u20093\u2009V when in its \"deep-sleep\" mode.  Very nice \u2013 but until we factor in our application workload, we have no way to truly assess the impact of these MCU specs on overall energy efficiency.</p> <p>continue reading.... </p>"},{"location":"#the-bluejoule-benchmark-emscope-in-action","title":"The BlueJoule\u2122 benchmark \u2013 EM\u2022Scope in action","text":"<p>A basic Bluetooth Low Energy beacon \u2013 continually advertising the same packet on multiple channels \u2013 serves as the \"Hello World\" of BLE applications.\u2009 So let's see what we might learn by using EM\u2022Scope to measure and compare a representative set of BLE HW/SW platforms.</p> <p>coming soon.... </p>"},{"location":"articles/001-Benchmark/","title":"EM\u2022Bytes \u2009\u00b7\u2009 Quantifying energy efficiency with EM\u2022Scope","text":"<p> October 1, 2025\u2009 \u00b7  7 min read</p> <p>Vendor data sheets might specify that an ultra-low-power MCU draws (say) 700\u2009nA @\u20093\u2009V when in its \"deep-sleep\" mode.  Very nice \u2013 but until we factor in our application workload, we have no way to truly assess the impact of these MCU specs on overall energy efficiency.</p>"},{"location":"articles/001-Benchmark/#from-power-w-to-energy-j","title":"From power (\u2009W\u2009) to energy (\u2009J\u2009)","text":"<p>Unless our MCU stays completely inert \u2013 awaiting reset in \"shutdown\" mode \u2013 embedded application software has undue influence upon system power consumption over time.</p> <p>Consider a typical \"ultra-low-power\" wireless sensor tag \u2013 a class of embedded MCU applications which embody a relatively straightforward cyclic design pattern:</p> <p> \u2003wakeup from deep-sleep mode  \u2003acquire data from the environment  \u2003analyze this data using an algorithm  \u2003transmit results (wirelessly) to a gateway  \u2003re-enter (low-power) deep-sleep mode</p> <p>With application requirements dictating periods of activity ranging from once-per-second down to once-per-day, minimizing elapsed time between steps  through  would surely lower total power consumption \u2013 by re-entering \"deep-sleep\" that much sooner.</p> <p>In practice, steps  and  involve MCU peripherals performing I/O operations at application-defined data-rates \u2013 an ADC sampling at 15\u2009kHz, a radio transmitting at 1\u2009Mbps, etc.\u2009  With little to do while awaiting I/O completion, software often idles within a \"lite-sleep\" mode.</p> <p>Typical MCU power specs</p> <p>MCU lite-sleep mode typically consumes under 1\u2009mW of power and enables interrupt response times of less than 1\u2009\u03bcs.\u00a0  But while the CPU idles, other peripherals such as the radio could remain active \u2013 in fact drawing more\u2009 power than the CPU would alone.</p> <p>By constract, MCU deep-sleep mode might consume well under 10\u2009\u03bcW of power \u2013 but wakeup times could stretch to 100s of \u03bcs.\u00a0  While any active peripheral can awaken the CPU when idling, \"deep-sleep\" mode only powers a limited set of MCU elements (GPIOs, RTCs) which can trigger wakeup interrupts.</p> <p>Finally, MCU active mode \u2013 when the CPU fetches and executes instructions \u2013 will typically draw power at levels expressed as \u03bcW\u2009/\u2009Mhz.\u00a0  Standard industry metrics like EEMBC CoreMark\u00ae\u2009 help normalize performance claims by individual MCU vendors.</p> <p>Once the MCU returns to its \"active\" mode \u2013 and the application finally does some useful work \u2013 the impact of software on total power consumption boils down to the number\u2009 of instructions the CPU must fetch and execute.\u00a0 But how can we best quantify this impact\u2009???</p> <p>Joules, not Watts</p> <p>As programmers, we must focus on power consumption over a period of time.\u2009 Only then can we appreciate the oversized  impact our code might have on overall energy efficiency.</p>"},{"location":"articles/001-Benchmark/#profiling-energy-with-emscope","title":"Profiling energy with EM\u2022Scope","text":"<p>To bring energy efficiency into the foreground, we've introduced EM\u2022Scope \u2013 a tool used to capture, analyze, display, and deliver real-time profiles of power-consumption.</p> <p>Measuring target embedded systems performing typical periodic tasks, EM\u2022Scope offers insights to developers and integrators alike not found in the MCU data sheet \u2013 by adding the dimension of time\u2009 to the equation.</p> <p>On a personal note</p> <p>Back in the day, I never really worried about minimizing\u2009 system power consumption when developing embedded application software.\u2009 Instead, we fixated on maximizing\u2009 processor utilization \u2013 using every available MIP to continuously perform a multitude of real-time tasks.</p> <p>In my mind, the Texas Instruments MSP430 (announced in the 1990s) set the performance standard for the ultra-low-power\u2009 microcontroller as we know it today.\u2009 If nothing else, the MSP430 stands alone as the first MCU to use items from your fridge as a power source.</p> <p>As a software developer, the rules of the game have now changed \u2013 to one in which \"doing nothing\" for the longest possible time maximizes overall energy efficiency.\u2009 Yes, we still want to execute code as quickly as possible \u2013 so we can enjoy a \"deep-sleep\" that much sooner.</p> <p>EM\u2022Scope captures real-time information via a hardware power analyzer\u2009 connected to your target MCU board as well as your host PC:</p> <p></p> EM\u2022Scope Hardware Configuration   <p>At present, the EM\u2022Scope tool supports two different analyzers \u2013 each used to record power consumption in real-time while also sourcing voltage to your target board:</p> <p> Joulescope JS220 \u00b7 a high-precision analyzer that belongs in every hardware lab</p> <p> Nordic PPK2 \u00b7 an entry-level analyzer that fits any engineer's personal budget</p> <p>To normalize measurement, EM\u2022Scope presumes your target board will repeatedly perform a single\u2009 application task of interest \u2013 entering deep-sleep mode when complete, and awakening one-second later for the next iteration.</p> <p>Breaking the problem down</p> <p>While embedded applications typically perform multiple\u2009 tasks (sensing, analyzing, logging, transmitting) at a variety of rates, measuring the power consumption of each task in isolation \u2013 akin to unit-testing \u2013 helps us construct an application-level power-profile</p> <p>Knowing the 1\u2009Hz energy profile of each task [\u2009\u03bcJ/s\u2009], we can extrapolate to other rates of activity as well as combine results to characterize the application as a whole.\u2009 Indi\u00advidual tasks, while active less than 1% of the time, can often account for over 90% of the \u03bcJ/s.</p> <p>Since periodic activity occurs once per-second, recording for as little as 10\u201315\u2009seconds should provide a reasonable raw sample set for further analysis.\u2009 Often an iterative process to finalize results, EM\u2022Scope can generate interactive plots along the way as a visual aid:</p> <p></p> Wakeup \u00b7 Execute \u00b7 Sleep    <p>This particular plot displays power consumption of a single activation of our application task of interest \u2013 in this case, a Bluetooth Low-Energy (BLE) advertising event which transmits the same small data packet on three different 2.4\u2009GHz channels.</p> <p>Though not obvious, the trio of 300\u2009ms radio transmissions drawing 18\u2009mW accounts for less than half the power consumed between wakeup and sleep.\u2009 Closer scrutiny revels that software execution (while only drawing 8\u2009mW) has greater impact on the overall power profile.</p> <p>If you can't see the problem, how can you fix it\u2009??</p> <p>Visualizing power consumption over time with EM\u2022Scope gives software engineers a better perspective on how optimizing their code can contribute to overall energy efficiency \u2013 independent of any improvements in the underlying hardware technology.</p>"},{"location":"articles/001-Benchmark/#quantifying-energy-efficiency","title":"Quantifying energy efficiency","text":"<p>In the spirit of CoreMark\u2009 (used for comparing CPU performance)\u2009 EM\u2022Scope introduces a new single-score metric for quantifying energy efficiency \u2013 the EM\u2022erald.\u2009 Like other bench\u00admark scores, \"higher is better\" \u2013 more EM\u2022eralds means less power and greater efficiency.</p> <p>Starting with a baseline measurement of \u03bcJ/s using (say) ten 1\u2009Hz wakeup \u00b7 execute \u00b7 sleep cycles, we can easily calculate J/day.\u2009 In our earlier example, EM\u2022Scope determined that a complete one-second cycle consumed 33.913\u2009\u03bcJoules which scales to 2.930\u2009Joules per day.</p> <p>By measuring power consumption when in deep-sleep, EM\u2022Scope can calculate J/day for periodic activity occuring at any\u2009 rate.\u2009 If the BLE advertising event seen earlier happened once every ten seconds, this task would now require only 0.463\u2009Joules per day of energy. </p> <p>Can we harvest our daily energy needs\u2009??</p> <p>Vendors of energy-harvesting components will commonly characterize their offerings in terms of J/day (or mWh/day).\u2009 By making this figure readily available, EM\u2022Scope enables us to quickly determinime the viability of a particular solution.</p> <p>Since our application performs multiple activities at different rates, a simple sum of J/day results derived from benchmarking each activity in isolation provides a reasonable model of overall energy consumption within the application as a whole.</p> <p>Knowing J/day, we'll calculate our final EM\u2022erald score using a constant which approximates the energy capacity of a standard CR2032 coin-cell battery:</p> <p>\u2003EM\u2022eralds \u2009=\u2009 2400 / (Joules-per-day \u00d7 30) \u2009=\u2009 80 / Joules-per-day \u2003CR2032-capacity\u2009:\u2009 225\u2009mAh \u00d7 3.6 \u00d7 3.0\u2009V \u2248 2.43\u2009kJ \u20031 EM\u2022erald \u2009\u2248\u2009 1 CR2032-month</p> <p>Returning to our example:\u2009 BLE advertising at a one-second rate scores 27.30 EM\u2022eralds; BLE advertising at a ten-second rate scores 172.31 EM\u2022eralds.\u2009 As the duration of the period further increases, our BLE advertising score asymptotically approaches ~420 EM\u2022eralds.</p> <p>This particular example uses an MCU(1) which features extremely low current consumption when in deep-sleep.\u2009 While by no means the winner in a 1\u2009Hz race, this chip pulls away from the competitition(2) once we throttle back to (arguably) a more realistic rate of activity.</p> <ol> <li>Texas Instruments CC2340R5</li> <li>Nordic nRF54L15,\u2009 Silicon Labs ERF32BG22E</li> </ol> <p>The gold standard \u2014 \u201cfive years on a coin-cell\u201d \u2009\u2009\u2261\u2009 60 EM\u2022eralds</p> <p>Even if your ultra-low-power embedded application has different requirements for longevity and employs different sources of power, EM\u2022Scope helps developers continually mine their target system for more\u2009 EM\u2022eralds.</p>"},{"location":"articles/001-Benchmark/#learning-more-about-emscope","title":"Learning more about EM\u2022Scope","text":"<p>The EM Foundation makes EM\u2022Scope openly available on GitHub, where you'll find this extended ReadMore file covering installation and usage of the tool.\u2009 Even if you don't plan to work with EM\u2022Scope in the near-term, at least skim through its documentation.</p> <p>We've also made available the em-foundation/BlueJoule repository housing power profiles captured by others \u2013 including the BLE example seen earlier.\u2009 You need not invest in a HW power analyzer to learn more about the benefits EM\u2022Scope offers to SW developers.</p> <p>Happy coding\u2009!!! \u2002  </p>"}]}